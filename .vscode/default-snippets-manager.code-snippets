{
  "css": {
    "prefix": "css",
    "description": "css",
    "scope": "css",
    "body": [
      "body,",
      "html {",
      "  margin: 8px;",
      "  background-color: black;",
      "  color: white;",
      "  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;",
      "}",
      "",
      "h1,",
      "h2 {",
      "  font-family: consolas;",
      "}",
      "",
      "h1 {",
      "  text-align: center;",
      "  font-size: xxx-large;",
      "  color: white;",
      "  text-shadow: -10 10 10px #9c27b0, -10 0 20px #9c27b0, -10 0 30px #9c27b0, -10 0 40px #9c27b0;",
      "",
      "}",
      "",
      "table {",
      "  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;",
      "  font-size: 12px;",
      "  font-weight: normal;",
      "  border: none;",
      "  border-collapse: collapse;",
      "  max-width: 100%;",
      "  background-color: white;",
      "  color: black;",
      "  width: 100%;",
      "  margin-top: 20px;",
      "}",
      "",
      "table td,",
      "table th {",
      "  padding: 8px;",
      "}",
      "",
      "th {",
      "  color: #ffffff;",
      "  background: #324960;",
      "  font-size: x-large;",
      "  margin: auto;",
      "}",
      "",
      "",
      "table td {",
      "  font-size: large;",
      "}",
      "",
      "table tr:nth-child(even) {",
      "  background: #eeeeee;",
      "",
      "}",
      "",
      "table td:nth-child(1) {",
      "  white-space: nowrap;",
      "}",
      "",
      "table a:hover {",
      "  background-color: transparent;",
      "  text-decoration: underline;",
      "}",
      "",
      ".viewports {",
      "  display: grid;",
      "  grid-template-columns: repeat(2, 1fr);",
      "  grid-template-rows: 1fr;",
      "  grid-column-gap: 8px;",
      "  height: 100vh;",
      "}",
      "",
      "",
      ".container {",
      "  display: flex;",
      "  justify-content: center;",
      "  align-items: center;",
      "  height: 100vh;",
      "}",
      "",
      ".spinner {",
      "  margin: auto;",
      "  width: 75px;",
      "  height: 75px;",
      "  border-radius: 50%;",
      "  border: 5px solid #324960;",
      "  border-top-color: #ffffff;",
      "  box-shadow: 0 0 8px rgba(255, 255, 255, 0.8);",
      "  animation: spin 1s ease-in-out infinite;",
      "}",
      "",
      "@keyframes spin {",
      "  to {",
      "    transform: rotate(360deg);",
      "  }",
      "}",
      "",
      ".header {",
      "  display: flex;",
      "  align-items: center;",
      "}",
      "",
      "",
      "h2 {",
      "  display: inline-block;",
      "  margin-right: 32px;",
      "}",
      "",
      "input {",
      "  font-size: 16px;",
      "}",
      "",
      "button {",
      "  font-size: 16px;",
      "  font-weight: 400;",
      "}"
    ]
  },
  "1-myapp": {
    "prefix": "1-myapp",
    "description": "1-myapp",
    "scope": "html",
    "body": [
      "<import from=\"./components/person-component/person-component.ts\"></import>\r",
      "<import from=\"./components/details-view/details-view.ts\"></import>\r",
      "\r",
      "<h1>Star Wars API Browser</h1>\r",
      "\r",
      "<div class=\"viewports\">\r",
      "  <au-viewport name=\"main\" default=\"person-component\"></au-viewport>\r",
      "  <au-viewport name=\"details\" default=\"details-view\"></au-viewport>\r",
      "</div>\r",
      ""
    ]
  },
  "2-au2-register-router": {
    "prefix": "2-au2-register-router",
    "description": "au2-register-router",
    "scope": "typescript",
    "body": [
      ".register(RouterConfiguration.customize({ useUrlFragmentHash: false }))"
    ]
  },
  "3-swapi-service": {
    "prefix": "3-swapi-service",
    "description": "SWAPI Service",
    "scope": "typescript",
    "body": [
      "import { DI, IHttpClient } from \"aurelia\";",
      "",
      "export class SwapiService {",
      "",
      "    constructor(@IHttpClient readonly http: IHttpClient) {",
      "        http.baseUrl = \"https://swapi.dev/api/\";",
      "    }",
      "",
      "    public async getById(resource: objectType, id: string) {",
      "        const resourcePath = `\\${resource\\}/\\${id\\}`;",
      "        const result = await this.http.fetch(resourcePath);",
      "        if (!result.ok) {",
      "            throw \"Failed to fetch resource\";",
      "        }",
      "",
      "        return await result.json();",
      "    }",
      "",
      "    public async getByUrl(entityUrl: string): Promise<object> {",
      "        const result = await this.http.fetch(entityUrl);",
      "        if (!result.ok) {",
      "            throw \"Failed to fetch resource\";",
      "        }",
      "",
      "        return await result.json();",
      "    }",
      "}",
      "",
      "export const ISwapiService = DI.createInterface<SwapiService>('SwapiService',",
      "    (x) => x.singleton(SwapiService));",
      "",
      "export type objectType =",
      "    \"films\" |",
      "    \"people\" |",
      "    \"planets\" |",
      "    \"species\" |",
      "    \"starships\" |",
      "    \"vehicles\";",
      ""
    ]
  },
  "4-person-component": {
    "prefix": "4-person-component-view",
    "description": "4-person-component-view",
    "scope": "html",
    "body": [
      "<div class=\"header\">",
      "  <h2>",
      "    <label>Character Search</label>",
      "  </h2>",
      "  <span>",
      "    <input",
      "      type=\"number\"",
      "      value.bind=\"id\"",
      "      placeholder=\"1 - 83\"",
      "      min=\"1\"",
      "      max=\"83\"",
      "    />",
      "    <button click.trigger=\"getPerson(id)\">Search</button>",
      "  </span>",
      "</div>",
      "",
      "<div class=\"container\" if.bind=\"fetchingdata\">",
      "  <div class=\"spinner\"></div>",
      "</div>"
    ]
  },
  "4-person-component-viewmodel": {
    "prefix": "4-person-component-viewmodel",
    "description": "person component - view model",
    "scope": "typescript",
    "body": [
      "import { ISwapiService, SwapiService } from \"../../services/swapiService\";",
      "",
      "export class PersonComponent {",
      "    public fetchingdata = false;",
      "    public person;",
      "",
      "    constructor(@ISwapiService private readonly swapiService: SwapiService) { }",
      "",
      "    async getPerson(input: string) {",
      "        this.fetchingdata = true;",
      "        this.person = await this.swapiService.getById('people', input);",
      "        this.fetchingdata = false;",
      "    }",
      "",
      "    isArray(obj) {",
      "        return Array.isArray(obj);",
      "    }",
      "}"
    ]
  },
  "5-person-table": {
    "prefix": "5-person-table",
    "description": "5-person-table",
    "scope": "html",
    "body": [
      "<table if.bind=\"person && !fetchingdata\">",
      "  <thead>",
      "    <tr>",
      "      <th colspan=\"2\">${person['name']}</th>",
      "    </tr>",
      "  </thead>",
      "",
      "  <tbody>",
      "    <tr repeat.for=\"attr of person | keys\">",
      "      <td if.bind=\"!$first\">${attr | capitalize}</td>",
      "",
      "      <td if.bind=\"!$first\">",
      "        <div if.bind=\"!isArray(person[attr])\">",
      "          <template if.bind=\"person[attr].startsWith('https://')\">",
      "            <a load=\"../details-view(${person[attr]})@details\">",
      "              ${person[attr]}",
      "            </a>",
      "          </template>",
      "          <template else> ${person[attr] | stringify} </template>",
      "        </div>",
      "        <div else repeat.for=\"link of person[attr]\">",
      "          <a load=\"../details-view(\\${link\\})@details\">\\${link\\}</a>",
      "        </div>",
      "      </td>",
      "    </tr>",
      "  </tbody>",
      "</table>"
    ]
  },
  "6-global-registry": {
    "prefix": "6-global-registry",
    "description": "6-global-registry",
    "scope": "typescript",
    "body": [
      "export * from './components/details-view/details-view';",
      "export * from \"./components/person-component/person-component\";",
      "",
      "export * from \"./value-converters/value-converters\";",
      ""
    ]
  },
  "7-value-converters": {
    "prefix": "7-value-converters",
    "description": "7-value-converters",
    "scope": "typescript",
    "body": [
      "import { valueConverter } from \"aurelia\";",
      "",
      "@valueConverter('capitalize')",
      "export class CapitalizeValueConverter {",
      "    toView(input: string): string {",
      "        return input.charAt(0).toUpperCase() + input.substring(1).replace(\"_\", \" \");",
      "    }",
      "}",
      "",
      "@valueConverter('keys')",
      "export class KeysValueConverter {",
      "    toView(obj): string[] {",
      "        const keys = Reflect.ownKeys(obj) as string[];",
      "        return keys.filter(x => x !== '$observers' && x !== 'created' && x !== 'edited');",
      "    }",
      "}",
      "",
      "@valueConverter('stringify')",
      "export class StringifyValueConverter {",
      "    toView(input: string) {",
      "        if (typeof (input) === 'number') {",
      "            return input;",
      "        }",
      "",
      "        if (input.startsWith(\"https://\")) {",
      "            return input;",
      "        }",
      "",
      "        const utcTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{6}Z$/;",
      "        if (utcTimeRegex.test(input)) {",
      "            return new Date(input).toLocaleString();",
      "        }",
      "",
      "        return input;",
      "    }",
      "}"
    ]
  },
  "8-import-registry-in-main": {
    "prefix": "8-import-registry-in-main",
    "description": "8-import-registry-in-main",
    "scope": "typescript",
    "body": ["import * as globalRegistry from './globalRegistry';"]
  },
  "10-details-view-viewmodel": {
    "prefix": "10-details-view-viewmodel",
    "description": "10-details-view-viewmodel",
    "scope": "typescript",
    "body": [
      "import { ISwapiService, SwapiService } from \"../../services/swapiService\";",
      "",
      "export class DetailsView {",
      "    public url: string;",
      "",
      "    constructor(@ISwapiService private readonly swapiService: SwapiService) { }",
      "",
      "    async loading(params: object) {",
      "        if (!params[0]) {",
      "            return;",
      "        }",
      "",
      "        this.url = params[0];",
      "    }",
      "",
      "    public async loadEntity() {",
      "        if (!this.url) { return; }",
      "",
      "        return this.swapiService.getByUrl(this.url);",
      "    }",
      "",
      "    isArray(input) {",
      "        return Array.isArray(input);",
      "    }",
      "}"
    ]
  },
  "11-details-view-view": {
    "prefix": "11-details-view-view",
    "description": "11-details-view-view",
    "scope": "html",
    "body": [
      "<div promise.bind=\"loadEntity(url)\">",
      "  <div class=\"container\" pending>",
      "    <div class=\"spinner\"></div>",
      "  </div>",
      "",
      "  <template then.from-view=\"entity\">",
      "    <div class=\"header\">",
      "      <h2>${Object.values(entity)[0]} - Details</h2>",
      "    </div>",
      "",
      "    <table>",
      "      <thead>",
      "        <tr>",
      "          <th colspan=\"2\">${Object.values(entity)[0]}</th>",
      "        </tr>",
      "      </thead>",
      "",
      "      <tbody>",
      "        <tr repeat.for=\"attr of entity | keys\">",
      "          <td if.bind=\"!first\">${attr | capitalize}</td>",
      "",
      "          <td if.bind=\"!first\">",
      "            <div if.bind=\"!isArray(entity[attr])\">",
      "              <template if.bind=\"!entity[attr].startsWith('https://')\">",
      "                ${entity[attr] | stringify}",
      "              </template>",
      "              <template else>",
      "                <a load=\"../details-view(${entity[attr]})@details\"",
      "                  >${entity[attr]}</a",
      "                >",
      "              </template>",
      "            </div>",
      "            <div else repeat.for=\"link of entity[attr]\">",
      "              <a load=\"../details-view(${link})@details\"> ${link} </a>",
      "            </div>",
      "          </td>",
      "        </tr>",
      "      </tbody>",
      "    </table>",
      "  </template>",
      "",
      "  <div catch.from-view=\"error\">${error}</div>",
      "</div>",
      ""
    ]
  },
  "au2-create-interface": {
    "prefix": "au2-create-interface",
    "description": "au2-create-interface",
    "scope": "typescript",
    "body": [
      "export const ISwapiService = DI.createInterface<SwapiService>('SwapiService',\r",
      "    (x) => x.singleton(SwapiService));"
    ]
  },
  "au2-import": {
    "prefix": "au2-import",
    "description": "au2-import",
    "scope": "html",
    "body": ["<import from=\"\"></import>"]
  }
}
