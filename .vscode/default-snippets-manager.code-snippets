{
    "css": {
        "prefix": "css",
        "description": "css",
        "scope": "css",
        "body": [
            "body,\r",
            "html {\r",
            "  margin: 8px;\r",
            "  background-color: black;\r",
            "  color: white;\r",
            "  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\r",
            "}\r",
            "\r",
            "h1,\r",
            "h2 {\r",
            "  font-family: consolas;\r",
            "}\r",
            "\r",
            "table {\r",
            "  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r",
            "  font-size: 12px;\r",
            "  font-weight: normal;\r",
            "  border: none;\r",
            "  border-collapse: collapse;\r",
            "  max-width: 100%;\r",
            "  background-color: white;\r",
            "  color: black;\r",
            "  width: 100%;\r",
            "}\r",
            "\r",
            "table td,\r",
            "table th {\r",
            "  padding: 8px;\r",
            "}\r",
            "\r",
            "table td {\r",
            "  border-right: 1px solid #f8f8f8;\r",
            "  font-size: 12px;\r",
            "}\r",
            "\r",
            "table tr:nth-child(even) {\r",
            "  background: #F8F8F8;\r",
            "}\r",
            "\r",
            "table td:nth-child(1) {\r",
            "  white-space: nowrap;\r",
            "}\r",
            "\r",
            "table a:hover {\r",
            "  background-color: transparent;\r",
            "  text-decoration: underline;\r",
            "}\r",
            "\r",
            ".viewports {\r",
            "  display: grid;\r",
            "  grid-template-columns: repeat(2, 1fr);\r",
            "  grid-template-rows: 1fr;\r",
            "  grid-column-gap: 8px;\r",
            "  height: 100vh;\r",
            "}\r",
            "\r",
            ".table-header {\r",
            "  color: #ffffff;\r",
            "  background: #324960;\r",
            "  font-size: large;\r",
            "  margin: auto;\r",
            "}"
        ]
    },
    "global-registry": {
        "prefix": "global-registry",
        "description": "global-registry",
        "scope": "typescript",
        "body": [
            "export * from './components/details-view/details-view';\r",
            "export * from \"./components/person-component/person-component\";\r",
            "\r",
            "export * from \"./value-converters/keysValueConverter\";\r",
            "export * from \"./value-converters/capitalizeValueConverter\";\r",
            "export * from \"./value-converters/stringifyValueConverter\";\r",
            "export * from \"./value-converters/linkifyValueConverter\";\r",
            ""
        ]
    },
    "table-full": {
        "prefix": "table-full",
        "description": "table-full",
        "scope": "html",
        "body": [
            "<table if.bind=\"person\">\r",
            "  <tbody>\r",
            "    <tr repeat.for=\"attr of person | keys\">\r",
            "      <td if.bind=\"!$first\">${attr | capitalize}</td>\r",
            "      <td colspan.bind=\"$first?'2':'1'\" table-header.class=\"$first\">\r",
            "        <div if.bind=\"!isArray(person[attr])\">${person[attr] | stringify}</div>\r",
            "        <div else repeat.for=\"link of person[attr]\">\r",
            "          <a href.bind=\"link\" external>${link}</a>\r",
            "          <a load=\"../details-view(${link})@details-viewport\"> ${link} </a>\r",
            "        </div>\r",
            "      </td>\r",
            "    </tr>\r",
            "  </tbody>\r",
            "</table>\r",
            ""
        ]
    },
    "au2-create-interface": {
        "prefix": "au2-create-interface",
        "description": "au2-create-interface",
        "scope": "typescript",
        "body": [
            "export const ISwapiService = DI.createInterface<SwapiService>('SwapiService',\r",
            "    (x) => x.singleton(SwapiService));"
        ]
    },
    "3-swapi-service": {
        "prefix": "3-swapi-service",
        "description": "3-swapi-service",
        "scope": "typescript",
        "body": [
            "import { DI, IHttpClient } from \"aurelia\";\r",
            "\r",
            "export class SwapiService {\r",
            "\r",
            "    constructor(@IHttpClient readonly http: IHttpClient) {\r",
            "        http.baseUrl = \"https://swapi.dev/api/\";\r",
            "    }\r",
            "\r",
            "    public async getById(resource: objectType, id: string) {\r",
            "        const resourcePath = `${resource}/${id}`;\r",
            "        const result = await this.http.fetch(resourcePath);\r",
            "        if (!result.ok) {\r",
            "            throw \"Failed to fetch resource\";\r",
            "        }\r",
            "\r",
            "        return await result.json();\r",
            "    }\r",
            "\r",
            "    public async getByUrl(entityUrl: string): Promise<object> {\r",
            "        const result = await this.http.fetch(entityUrl);\r",
            "        if (!result.ok) {\r",
            "            throw \"Failed to fetch resource\";\r",
            "        }\r",
            "\r",
            "        return await result.json();\r",
            "    }\r",
            "}\r",
            "\r",
            "export const ISwapiService = DI.createInterface<SwapiService>('SwapiService',\r",
            "    (x) => x.singleton(SwapiService));\r",
            "\r",
            "export type objectType =\r",
            "    \"films\" |\r",
            "    \"people\" |\r",
            "    \"planets\" |\r",
            "    \"species\" |\r",
            "    \"starships\" |\r",
            "    \"vehicles\";\r",
            ""
        ]
    },
    "table": {
        "prefix": "table",
        "description": "table",
        "scope": "html",
        "body": [
            "<table>",
            "  <thead>",
            "    <tr>",
            "      <td></td>",
            "    </tr>",
            "  </thead>",
            "  <tbody>",
            "    <tr>",
            "      <td></td>",
            "    </tr>",
            "  </tbody>",
            "</table>",
            ""
        ]
    },
    "2-person-component-input": {
        "prefix": "2-person-component-input",
        "description": "2-person-component-input",
        "scope": "html",
        "body": [
            "<div>",
            "  <label for=\"name\">Choose an id between 1 and 83</label>",
            "  <input autocomplete=\"off\" type=\"text\" value.bind=\"id\" />",
            "  <button click.trigger=\"getPerson(id)\">Search</button>",
            "</div>"
        ]
    },
    "1-myapp": {
        "prefix": "1-myapp",
        "description": "1-myapp",
        "scope": "html",
        "body": [
            "<import from=\"./components/person-component/person-component.ts\"></import>\r",
            "<import from=\"./components/details-view/details-view.ts\"></import>\r",
            "\r",
            "<h1>Star Wars API Browser</h1>\r",
            "\r",
            "<div class=\"viewports\">\r",
            "  <au-viewport name=\"main\" default=\"person-component\"></au-viewport>\r",
            "  <au-viewport name=\"details\" default=\"details-view\"></au-viewport>\r",
            "</div>\r",
            ""
        ]
    },
    "au2-import": {
        "prefix": "au2-import",
        "description": "au2-import",
        "scope": "html",
        "body": [
            "<import from=\"\"></import>"
        ]
    },
    "au2-register-router": {
        "prefix": "au2-register-router",
        "description": "au2-register-router",
        "scope": "typescript",
        "body": [
            ".register(RouterConfiguration.customize({ useUrlFragmentHash: false }))"
        ]
    }
}